import { assert, expect } from 'chai';
import requestScenarios from '../../../actions/requestScenariosAction';
import requestScenarioVersionsAction from '../../../actions/requestScenarioVersionsAction';
import saveScenario from '../../../actions/saveScenarioAction';
import archiveScenarioAction from '../../../actions/archiveScenarioAction';
import setScenarioVersionAction from '../../../actions/setScenarioVersionAction';
import resetScenarioVersions from '../../../actions/resetScenarioVersionsAction';
import { update } from '../../../actions/scenarioListAction';
import {
  ARCHIVE_SCENARIO,
  REQUEST_SCENARIO_VERSIONS,
  REQUEST_SCENARIOS,
  RESET_SCENARIO_VERSIONS,
  SAVE_SCENARIO,
  SET_SCENARIO_VERSION,
  UPDATE_SELECTED_SCENARIOS,
} from '../../../constants/actionTypes';

import connector, {
  __RewireAPI__ as mock,
} from '../../../routes/scenario/scenarioConnector';

describe('scenarioConnector', () => {
  const FAKE_COMPONENT = {};

  beforeEach(() => {
    mock.__Rewire__(
      'connect',
      (actualMapStateToProps, actualMapActionsToProps) => {
        expect(actualMapActionsToProps).to.deep.equal({
          [ARCHIVE_SCENARIO]: archiveScenarioAction,
          [REQUEST_SCENARIOS]: requestScenarios,
          [SAVE_SCENARIO]: saveScenario,
          [REQUEST_SCENARIO_VERSIONS]: requestScenarioVersionsAction,
          [SET_SCENARIO_VERSION]: setScenarioVersionAction,
          [UPDATE_SELECTED_SCENARIOS]: update,
          [RESET_SCENARIO_VERSIONS]: resetScenarioVersions,
        });

        return actualComponent => {
          expect(actualComponent).to.deep.equal(FAKE_COMPONENT);

          return FAKE_COMPONENT;
        };
      }
    );
  });

  afterEach(() => {
    const mockedCollaborators = ['connect'];

    mockedCollaborators.forEach(collaborator => mock.__ResetDependency__);
  });

  it('should do nothing if action type is not supported', () => {
    const actualReducer = connector(FAKE_COMPONENT);

    expect(actualReducer).to.deep.equal(FAKE_COMPONENT);
  });
});
