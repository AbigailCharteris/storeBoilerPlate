import React from 'react';
import { shallow } from 'enzyme';
import { assert, expect } from 'chai';
import BatchContainer from '../../../routes/batch/batchContainer';
import {
  logObject,
  logEnzyme,
  logEnzymeText,
} from './../../../../auth/specs/util/testUtils';

describe('BatchContainer Component', () => {
  const props = {
    SCENARIO_LIST: [],
    BATCH_LIST: [],
    REQUEST_BATCHES: () => true,
    SAVE_BATCH: () => true,
    CAN_EDIT: true,
    busy: false,
  };

  const mockState = {
    SELECTED_BATCH: {
      id: 'testId',
      batchName: 'Monday',
      version: '20170511114104',
      deltaComment: 'test comment',
      added: [],
      removed: [],
      scenarioList: [
        {
          id: '45d65215-cdb8-4d40-9adb-7ce83c4266bf',
          scenarioName: 'BoEGlobalShock',
          description: 'BoEGlobalShock',
          shockClassification: 'Global',
          data: undefined,
          version: '20170822105240',
          auditList: [
            {
              updatedBy: 'Adrian Charteris (1559670)',
              timestamp: '20170627150454',
            },
          ],
          archived: false,
          fileVersion: 3,
        },
        {
          id: 'bf981a5b-ea3e-439d-8e10-73ab965eb5e0',
          scenarioName: 'BoEGlobalShock_20170628112328',
          description: 'test',
          shockClassification: 'Global',
          data: undefined,
          version: '20170714084624',
          auditList: [
            {
              updatedBy: 'Adrian Charteris (1559670)',
              timestamp: '20170714084624',
            },
          ],
          archived: false,
          fileVersion: 1,
        },
      ],
      auditList: [
        {
          updatedBy: 'unused',
          timestamp: '20170511114104',
          added: [{ id: '', scenarioName: '' }],
          removed: [{ id: '', scenarioName: '' }],
        },
      ],
    },
    SELECTED_TARGET_BATCH: undefined,
    UNSELECTED_SCENARIOS: [],
    SELECTED_SCENARIOS: [
      {
        id: 'd44a4357-9181-4075-ac41-4dbe2c38eaeb',
        scenarioName: 'Bond_Armageddon',
        description: 'Bond Armageddon 6.0',
        shockClassification: 'Global',
        data: undefined,
        version: '20170714075426',
        auditList: [
          {
            updatedBy: 'Adrian Charteris (1559670)',
            timestamp: '20170627150832',
          },
          {
            updatedBy: 'Adrian Charteris (1559670)',
            timestamp: '20170714075413',
          },
        ],
      },
    ],
    SELECTION_LIMIT: 1,
    DELTA_COMMENT: '',
    DELTA_FIELDS: { added: [], removed: [], combined: [] },
    COMMENT_VALIDATED: false,
    busy: true,
    isSaving: false,
    isSaved: false,
    isDeltaModalActive: false,
  };

  beforeEach(() => {});

  afterEach(() => {});

  it('Should render the container', () => {
    const wrapper = shallow(<BatchContainer {...props} />);

    const element = wrapper.find('.batchContainer').text();
    expect(element).to.be.eql('<Grid />');
  });

  it('Should render a Dialog component', () => {
    const wrapper = shallow(<BatchContainer {...props} />);

    const element = wrapper.find('DeltaDialog').text();
    expect(element).to.be.eql('<DeltaDialog />');
  });

  it('Should render a List component', () => {
    const wrapper = shallow(<BatchContainer {...props} />);
    expect(wrapper.find('ListComponent')).to.have.length(3);
  });

  it('Should NOT render a save button if CAN_EDIT is set to FALSE', () => {
    props.CAN_EDIT = false;
    const wrapper = shallow(<BatchContainer {...props} />);

    const element = wrapper.find('.save-btn-wrapper');
    expect(element).to.have.length(0);
  });

  it('Should calculate the delta of a given btach list', () => {
    const wrapper = shallow(<BatchContainer {...props} />);

    wrapper.setState(mockState);
    wrapper.instance().calculateDelta();

    expect(wrapper.state().DELTA_FIELDS.added.length).to.equal(1);
    expect(wrapper.state().DELTA_FIELDS.removed.length).to.equal(2);
    expect(wrapper.state().DELTA_FIELDS.combined.length).to.equal(3);
  });
});
