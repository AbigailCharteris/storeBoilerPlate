import { assert, expect } from 'chai';
import sinon from 'sinon';
import { REQUEST_BATCHES_FULFILLED } from '../../constants/actionTypes';

import action, {
  __RewireAPI__ as mock,
} from '../../actions/requestBatchesFulfilledAction';

describe('requestBatchesFulfilledAction', () => {
  const toModelMock = sinon.stub();

  beforeEach(() => {
    mock.__Rewire__('toModel', toModelMock);
  });

  afterEach(() => {
    mock.__ResetDependency__('toModel');
  });

  it('generate action', () => {
    const batches = [];
    const expectedPayload = { payload: batches };

    toModelMock.withArgs(batches).returns(expectedPayload);

    const actualAction = action(batches);

    expect(actualAction).to.deep.equal({
      type: REQUEST_BATCHES_FULFILLED,
      ...expectedPayload,
    });
  });
});
