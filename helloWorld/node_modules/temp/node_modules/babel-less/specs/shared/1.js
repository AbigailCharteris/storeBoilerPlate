import { expect } from 'chai';
import sinon from 'sinon';

import BatchManagementApi from '../../shared/batchmanagementApi';

describe('BatchManagementApi', () => {
  const httpService = {
    getAsync: (...args) => Promise.resolve(['get', ...args]),
    postAsync: (...args) => Promise.resolve(['post', ...args]),
    putAsync: (...args) => Promise.resolve(['put', ...args]),
    deleteAsync: (...args) => Promise.resolve(['delete', ...args]),
  };

  const batchManagementUrl = 'https://raveBatchManagementApi';

  const loginStore = {
    getFullNameAndId: () => 'fullName',
  };

  const api = new BatchManagementApi({
    httpService,
    batchManagementUrl,
    loginStore,
  });

  describe('requestBatchList', () => {
    it('should return results from http request', () =>
      api
        .requestBatchList()
        .then(url =>
          expect(url).to.deep.equals(['get', `${batchManagementUrl}/batch`])
        ));
  });

  describe('requestScenarioList', () => {
    const scenarios = [
      {
        scenarioName: 'scenarioName',
        id: '1234',
        updatedBy: 0,
        updated: 'user1',
      },
    ];

    before(() => {
      sinon.stub(httpService, 'getAsync', () => Promise.resolve(scenarios));
    });

    after(() => {
      httpService.getAsync.restore();
    });

    it('should return results from http request', () =>
      api.requestScenarioList().then(url =>
        expect(url).to.deep.equals(
          scenarios.map(scenario => ({
            ...scenario,
            updatedBy: 'user1',
            updated: 0,
          }))
        )
      ));
  });

  describe('updateBatch', () => {
    const data = {
      batchName: 'batchName',
      scenarios: ['scenarioId1', 'scenarioId2'],
    };

    it('should return results from http request', () =>
      api.updateBatch(data).then(args =>
        expect(args).to.deep.equals([
          'post',
          `${batchManagementUrl}/batch`,
          {
            batchName: 'batchName',
            scenarios: ['scenarioId1', 'scenarioId2'],
            updatedBy: 'fullName',
          },
        ])
      ));
  });

  describe('createScenario', () => {
    const scenario = {
      scenarioName: 'scenarioName',
      description: 'description',
      scenarioFile: 'scenarioFile',
    };

    it('should return results from http request', () =>
      api.createScenario(scenario).then(args => {
        expect(args).to.deep.equals([
          'post',
          `${batchManagementUrl}/scenario`,
          {
            ...scenario,
            createdBy: 'fullName',
          },
        ]);
      }));
  });

  describe('updateScenario', () => {
    const scenario = {
      scenarioName: 'scenarioName',
      description: 'description',
      scenarioFile: 'scenarioFile',
    };

    it('should return results from http request', () =>
      api.updateScenario(scenario).then(args => {
        expect(args).to.deep.equals([
          'put',
          `${batchManagementUrl}/scenario`,
          {
            ...scenario,
            updatedBy: 'fullName',
          },
        ]);
      }));
  });

  describe('deleteScenarios', () => {
    const data = { scenarioIds: ['scenarioId1'] };

    it('should return results from http request', () =>
      api.deleteScenarios(data).then(args => {
        expect(args).to.deep.equals([
          'delete',
          `${batchManagementUrl}/scenario`,
          data,
        ]);
      }));
  });
});
