import { expect } from 'chai';
import { Observable } from 'rxjs'; // required to pull in RXJS all functions
import configureMockStore from 'redux-mock-store';
import { combineEpics, createEpicMiddleware, EPIC_END } from 'redux-observable';
import { SAVE_SCENARIO } from '../../constants/actionTypes';
import { SCENARIO } from '../../constants/stateConstants';

import epic, { __RewireAPI__ as epicMock } from '../../epics/saveScenariosEpic';

const str = JSON.stringify;

describe('saveScenariosEpic', () => {
  const FAKE_SCENARIO = {};

  const FAKE_REQUEST_FULFILLED_ACTION = { type: 'scenarios' };

  let stream;

  // The api should return an stream which will ultimately trigger a new action
  const mockApi = {
    updateScenario: scenario => {
      expect(scenario).to.deep.equal(FAKE_SCENARIO);

      return stream;
    },
  };

  beforeEach(() => {
    stream = Observable.of([FAKE_SCENARIO]);

    epicMock.__Rewire__('batchManagementApiFactory', () => mockApi);
    epicMock.__Rewire__(
      'requestScenariosAction',
      () => FAKE_REQUEST_FULFILLED_ACTION
    );
  });

  afterEach(() => {
    const mockedCollaborators = [
      'batchManagementApiFactory',
      'requestScenariosAction',
    ];

    mockedCollaborators.forEach(collaborator => epicMock.__ResetDependency__);
  });

  const saveAction = () => ({
    type: SAVE_SCENARIO,
    payload: { [SCENARIO]: FAKE_SCENARIO },
  });

  const createStore = () => {
    const epicMiddleware = createEpicMiddleware(combineEpics(epic));
    const mockStore = configureMockStore([epicMiddleware]);
    return mockStore();
  };

  it('when request scenarios triggered, request scenarios from the api', () => {
    const action = saveAction();

    const store = createStore();

    store.dispatch(action);

    expect(str(store.getActions())).to.equal(
      str([action, FAKE_REQUEST_FULFILLED_ACTION])
    );
  });
});
