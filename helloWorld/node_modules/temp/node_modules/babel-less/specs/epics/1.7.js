import { expect } from 'chai';
import { Observable } from 'rxjs'; // required to pull in RXJS all functions
import configureMockStore from 'redux-mock-store';
import { combineEpics, createEpicMiddleware, EPIC_END } from 'redux-observable';
import { SET_SCENARIO_VERSION } from '../../constants/actionTypes';
import {
  SCENARIO_FILE_VERSION,
  SCENARIO_ID,
} from '../../constants/stateConstants';
import requestScenarioVersionsAction from '../../actions/requestScenarioVersionsAction';

import epic, {
  __RewireAPI__ as epicMock,
} from '../../epics/setScenarioVersionEpic';

const str = JSON.stringify;

describe('setScenarioVersionEpic', () => {
  const FAKE_SCENARIO = {};
  const FAKE_SCENARIO_ID = 'test';
  const FAKE_SCENARIO_FILE_VERSION = 1;

  const FAKE_REQUEST_SCENARIO_VERSIONS = { type: 'scenarios' };

  let stream;

  // The api should return an stream which will ultimately trigger a new action
  const mockApi = {
    setScenarioVersion: (id, fileVersion) => {
      expect(id).to.deep.equal(FAKE_SCENARIO_ID);
      expect(fileVersion).to.deep.equal(FAKE_SCENARIO_FILE_VERSION);

      return stream;
    },
  };

  beforeEach(() => {
    stream = Observable.of([FAKE_SCENARIO]);

    epicMock.__Rewire__('batchManagementApiFactory', () => mockApi);
  });

  afterEach(() => {
    const mockedCollaborators = ['batchManagementApiFactory'];

    mockedCollaborators.forEach(collaborator => epicMock.__ResetDependency__);
  });

  const saveAction = () => ({
    type: SET_SCENARIO_VERSION,
    payload: {
      [SCENARIO_ID]: FAKE_SCENARIO_ID,
      [SCENARIO_FILE_VERSION]: FAKE_SCENARIO_FILE_VERSION,
    },
  });

  const createStore = () => {
    const epicMiddleware = createEpicMiddleware(combineEpics(epic));
    const mockStore = configureMockStore([epicMiddleware]);
    return mockStore();
  };

  it('when request scenarios triggered, request scenarios from the api', () => {
    const action = saveAction();

    const store = createStore();

    store.dispatch(action);

    expect(str(store.getActions())).to.equal(
      str([action, requestScenarioVersionsAction(FAKE_SCENARIO_ID)])
    );
  });
});
