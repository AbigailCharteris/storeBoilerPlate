import { expect } from 'chai';
import { Observable } from 'rxjs'; // required to pull in RXJS all functions
import configureMockStore from 'redux-mock-store';
import { combineEpics, createEpicMiddleware, EPIC_END } from 'redux-observable';
import {
  REQUEST_SCENARIO_VERSIONS,
  REQUEST_SCENARIO_VERSIONS_FULFILLED,
} from '../../constants/actionTypes';
import { SCENARIO_ID } from '../../constants/stateConstants';

import epic, {
  __RewireAPI__ as epicMock,
} from '../../epics/getScenarioVersionsEpic';

const str = JSON.stringify;

describe('getScenarioVersionsEpic', () => {
  const FAKE_SCENARIO_VERSION_DETAIL = {};
  const FAKE_SCENARIO_ID = 'test';

  const fakeStore = { getState: () => ({}) };

  const FAKE_REQUEST_FULFILLED_ACTION = {
    type: REQUEST_SCENARIO_VERSIONS_FULFILLED,
  };

  let scenarioStream;

  // The api should return an stream which will ultimately trigger a new action
  const mockApi = {
    requestScenarioVersionList: id => {
      expect(id).to.equal(FAKE_SCENARIO_ID);

      return scenarioStream;
    },
  };

  beforeEach(() => {
    scenarioStream = Observable.of(FAKE_SCENARIO_VERSION_DETAIL);

    epicMock.__Rewire__('batchManagementApiFactory', () => mockApi);
    epicMock.__Rewire__(
      'adaptScenarioVersionDetail',
      actualScenarioVersionDetail => {
        expect(actualScenarioVersionDetail).to.deep.equal(
          FAKE_SCENARIO_VERSION_DETAIL
        );
        return FAKE_SCENARIO_VERSION_DETAIL;
      }
    );

    epicMock.__Rewire__(
      'requestScenarioVersionsFulfilledAction',
      () => FAKE_REQUEST_FULFILLED_ACTION
    );
  });

  afterEach(() => {
    const mockedCollaborators = [
      'batchManagementApiFactory',
      'adaptScenarioList',
      'requestScenarioVersionsFulfilledAction',
    ];

    mockedCollaborators.forEach(collaborator => epicMock.__ResetDependency__);
  });

  const requestAction = () => ({
    type: REQUEST_SCENARIO_VERSIONS,
    payload: {
      [SCENARIO_ID]: FAKE_SCENARIO_ID,
    },
  });

  const createStore = () => {
    const epicMiddleware = createEpicMiddleware(combineEpics(epic));
    const mockStore = configureMockStore([epicMiddleware]);
    return mockStore();
  };

  it('when request scenarios versions triggered, request scenarios versions from the api and dispatch the returned list of scenarios to the action', () => {
    const action = requestAction();

    const store = createStore();

    store.dispatch(action);

    expect(str(store.getActions())).to.equal(
      str([action, FAKE_REQUEST_FULFILLED_ACTION])
    );
  });
});
