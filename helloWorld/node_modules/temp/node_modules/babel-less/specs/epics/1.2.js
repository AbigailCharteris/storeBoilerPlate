import { expect } from 'chai';
import { Observable } from 'rxjs'; // required to pull in RXJS all functions
import configureMockStore from 'redux-mock-store';
import { combineEpics, createEpicMiddleware, EPIC_END } from 'redux-observable';
import { REQUEST_BATCHES } from '../../constants/actionTypes';

import epic, {
  __RewireAPI__ as epicMock,
} from '../../epics/getBatchesAndScenariosEpic';

const str = JSON.stringify;

describe('authenticationEpic', () => {
  const FAKE_SCENARIO = {};
  const FAKE_BATCH = {};

  const FAKE_REQUEST_SCENARIOS_FULFILLED_ACTION = { type: 'scenarios' };
  const FAKE_REQUEST_BATCH_FULFILLED_ACTION = { type: 'batch' };

  let scenarioStream;
  let batchStream;

  // The api should return an stream which will ultimately trigger a new action
  const mockApi = {
    requestScenarioList: () => scenarioStream,
    requestBatchList: () => batchStream,
  };

  beforeEach(() => {
    scenarioStream = Observable.of([FAKE_SCENARIO]);
    batchStream = Observable.of([FAKE_BATCH]);

    epicMock.__Rewire__('batchManagementApiFactory', () => mockApi);
    epicMock.__Rewire__('adaptScenarioList', actualScenarioList => {
      expect(actualScenarioList).to.deep.equal([FAKE_SCENARIO]);
      return actualScenarioList;
    });
    epicMock.__Rewire__('adaptBatchList', actualbatchList => {
      expect(actualbatchList).to.deep.equal([FAKE_BATCH]);
      return actualbatchList;
    });

    epicMock.__Rewire__(
      'requestScenariosFulfilledAction',
      () => FAKE_REQUEST_SCENARIOS_FULFILLED_ACTION
    );
    epicMock.__Rewire__(
      'requestBatchesFulfilledAction',
      () => FAKE_REQUEST_BATCH_FULFILLED_ACTION
    );
  });

  afterEach(() => {
    const mockedCollaborators = [
      'batchManagementApiFactory',
      'adaptScenarioList',
      'adaptBatchList',
      'requestScenariosFulfilledAction',
      'requestBatchesFulfilledAction',
    ];

    mockedCollaborators.forEach(collaborator => epicMock.__ResetDependency__);
  });

  const requestBatchAction = () => ({ type: REQUEST_BATCHES });

  const createStore = () => {
    const epicMiddleware = createEpicMiddleware(combineEpics(epic));
    const mockStore = configureMockStore([epicMiddleware]);
    return mockStore();
  };

  it('when a batch is requested, fetch both batches AND scenarios', () => {
    const action = requestBatchAction();

    const store = createStore();

    store.dispatch(action);

    expect(str(store.getActions())).to.equal(
      str([
        action,
        FAKE_REQUEST_SCENARIOS_FULFILLED_ACTION,
        FAKE_REQUEST_BATCH_FULFILLED_ACTION,
      ])
    );
  });
});
