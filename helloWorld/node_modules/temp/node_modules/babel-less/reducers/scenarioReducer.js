import {
    REQUEST_SCENARIO_VERSIONS_FULFILLED,
    REQUEST_SCENARIOS_FULFILLED,
    REQUEST_SCENARIOS_AUDIT_FULFILLED,
    RESET_SCENARIO_VERSIONS,
    RESET_SCENARIOS,
    UPDATE_SELECTED_SCENARIOS,
    SET_FILTER,
  } from '../constants/actionTypes';
  import {
    SCENARIO_VERSION_LIST,
    SCENARIO_LIST,
    SCENARIO_AUDIT_LIST,
    SELECTED_SCENARIOS,
    FILTER,
  } from '../constants/stateConstants';
  import * as requestScenariosFulfilledAdapter from '../actionAdapters/requestScenariosFulfilledAdapter';
  import * as requestScenarioVersionsFulfilledAdapter from '../actionAdapters/requestScenarioVersionsFulfilledAdapter';
  import initialState from '../model/initialState';
  
  const scenariosReducer = (state = initialState, action) => {
    switch (action.type) {
      case REQUEST_SCENARIOS_FULFILLED: {
        const actionModel = requestScenariosFulfilledAdapter.fromModel(action);
  
        return {
          ...state,
          ...actionModel,
        };
      }
  
      case REQUEST_SCENARIOS_AUDIT_FULFILLED: {
        return {
          ...state,
          ...{ [SCENARIO_AUDIT_LIST]: action.payload[SCENARIO_LIST] || [] },
        };
      }
  
      case REQUEST_SCENARIO_VERSIONS_FULFILLED: {
        const actionModel = requestScenarioVersionsFulfilledAdapter.fromModel(
          action
        );
  
        return {
          ...state,
          ...actionModel,
        };
      }
  
      case UPDATE_SELECTED_SCENARIOS:
        return {
          ...state,
          ...{ [SELECTED_SCENARIOS]: action.payload || [] },
        };
  
      case RESET_SCENARIO_VERSIONS: {
        return {
          ...state,
          ...{ [SCENARIO_VERSION_LIST]: [] },
        };
      }
  
      case RESET_SCENARIOS:
        return {};
  
      case SET_FILTER:
        return {
          ...state,
          ...{ [FILTER]: action.payload || '' },
        };
  
      default:
        return state;
    }
  };
  
  export default scenariosReducer;
  