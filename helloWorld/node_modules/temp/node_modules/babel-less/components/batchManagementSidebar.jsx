import React, { PropTypes } from 'react';
import { connect } from 'react-redux';
import { createSelector, defaultMemoize } from 'reselect';
import links from '../constants/links';
import makeBaseRoutePath from '../utils/makeBaseRoutePath';
import LinksSection from '../../common/shared/components/navigation/linksSection';
import SearchInputComponent from './../shared/components/searchInputComponent';
import { SET_FILTER } from './../constants/actionTypes';
import setFilter from './../actions/setFilterAction';

class BatchManagementSidebar extends React.Component {
  constructor(ctorProps) {
    super(ctorProps);

    this.applyFilter = this.applyFilter.bind(this);
    this.makeBaseRoutePath = createSelector(
      props => props.routes,
      props => props.route,
      makeBaseRoutePath
    );

    const nestlinks = [
      {
        label: 'Audit',
        type: 'route',
        links: [
          {
            path: 'scenario-audit',
            label: 'Scenario Audit',
            type: 'route',
          },
          {
            path: 'batch-audit',
            label: 'Batch Audit',
            type: 'route',
          },
        ],
      },
    ];

    this.makeLinks = createSelector(this.makeBaseRoutePath, baseRoutePath =>
      links.map(link => ({
        ...link,
        path: `${baseRoutePath}/${link.path}`,
      }))
    );

    this.makeNestedLinks = createSelector(
      this.makeBaseRoutePath,
      baseRoutePath =>
        links.map(link => ({
          ...link,
          path: `${baseRoutePath}/${link.path}`,
        }))
    );
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.location) {
      this.SearchInputComponent.resetFilter();
    }
  }

  componentWillUnmount() {
    this.props[SET_FILTER]('');
  }

  applyFilter(filterValue) {
    this.props[SET_FILTER](filterValue);
  }

  render() {
    if (this.props.collapsed) {
      return null;
    }

    return (
      <div>
        <LinksSection
          sectionTitle="Batch Management"
          links={this.makeLinks(this.props)}
          isBusy={false}
          locationPath={this.props.location.pathname}
        />

        <SearchInputComponent
          ref={instance => {
            this.SearchInputComponent = instance;
          }}
          filterCallback={this.applyFilter}
        />
      </div>
    );
  }
}

BatchManagementSidebar.propTypes = {
  collapsed: PropTypes.bool,
  location: PropTypes.shape({
    pathname: PropTypes.string.isRequired,
  }).isRequired,
};

BatchManagementSidebar.defaultProps = {
  collapsed: false,
};

const mapActionsToProps = {
  [SET_FILTER]: setFilter,
};

export default connect(null, mapActionsToProps)(BatchManagementSidebar);
