import React, { Component } from 'react';
import PropTypes from 'prop-types';
import _ from 'lodash';
import {
  Button,
  ControlLabel,
  FieldGroup,
  FormControl,
  FormGroup,
  Modal,
  InputGroup,
  Glyphicon,
} from 'react-bootstrap';
import ContextItem from '../../../common/shared/components/navigation/contextItem';
import ActivityTitle from '../../../common/shared/components/navigation/activityTitle';

class SearchInputComponent extends Component {
  constructor(props) {
    super(props);
    this.onChanged = this.onChanged.bind(this);
    this.onChange = this.onChange.bind(this);
    this.resetFilter = this.resetFilter.bind(this);
    this.getClearFilterItemIcon = this.getClearFilterItemIcon.bind(this);
    this.getClearFilterIcon = this.getClearFilterIcon.bind(this);
    this.getFilterAppliedIcon = this.getFilterAppliedIcon.bind(this);
    this.delayedCallback = _.debounce(this.onChanged, 200);

    this.initialState = {
      filterText: '',
      filterApplied: false,
    };

    this.state = this.initialState;
  }

  onChanged(e) {
    this.props.filterCallback(this.state.filterText);
  }

  onChange(event) {
    event.persist();
    this.setState({ filterText: event.target.value, filterApplied: true });
    this.delayedCallback(event);
  }

  getClearFilterItemIcon(field, onClick) {
    if (this.state[field] === undefined || this.state[field] === '') {
      return null;
    }

    return (
      <div className="clear-filter-icon-container">
        <button onClick={onClick}>
          <i className="fa fa-times" />
        </button>
      </div>
    );
  }

  getClearFilterIcon() {
    if (!this.state.filterApplied) {
      return null;
    }

    return (
      <div className="reset-icon-container">
        <button onClick={() => this.resetFilter()}>
          <i className="fa fa-trash-o" />
        </button>
      </div>
    );
  }

  getFilterAppliedIcon() {
    return this.state.filterApplied ? <i className="fa fa-check" /> : null;
  }

  resetFilter() {
    this.setState({ filterText: '', filterApplied: false }, () =>
      this.props.filterCallback(this.state.filterText)
    );
  }
  render() {
    const { filterText } = this.state;
    return (
      <div className="download-filter-panel">
        <div className="download-filters-container">
          <h4>Filter {this.getFilterAppliedIcon()}</h4>
          {this.getClearFilterIcon()}
          <div style={{ position: 'relative' }}>
            <ContextItem label="Data Grid Contains" isInput>
              <input
                type="text"
                className="download-filename-filter"
                value={filterText}
                onChange={this.onChange}
              />
            </ContextItem>
            {this.getClearFilterItemIcon('filterText', this.resetFilter)}
          </div>
        </div>
      </div>
    );
  }
}

SearchInputComponent.propTypes = {
  filterCallback: PropTypes.func.isRequired,
};

export default SearchInputComponent;
