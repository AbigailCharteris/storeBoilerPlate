import _ from 'lodash';
import React, { PropTypes } from 'react';
import {
  Button,
  Col,
  Grid,
  Row,
  FormGroup,
  FormControl,
  ControlLabel,
  Glyphicon,
  DropdownButton,
  MenuItem,
  InputGroup,
  Tooltip,
  OverlayTrigger,
} from 'react-bootstrap';
import classNames from 'classnames';
import {
  BATCH_LIST,
  CAN_EDIT,
  SCENARIO_AUDIT_LIST,
  FILTER,
} from '../../constants/stateConstants';
import { REQUEST_SCENARIOS_AUDIT } from '../../constants/actionTypes';
import Scenario from '../../model/scenario';
import formatDate from '../../shared/dateTime';
import ListComponent, { VALUE } from '../../shared/components/listComponent';
import ScenarioAuditTableComponent from './scenarioAuditTableComponent';
import GlyphButton from '../../shared/components/glyphButton';

const sortByName = (a, b) => {
  const nameA = a.scenarioName.toUpperCase(); // ignore upper and lowercase
  const nameB = b.scenarioName.toUpperCase(); // ignore upper and lowercase

  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }
  // names must be equal
  return 0;
};
class ScenarioAuditContainer extends React.PureComponent {
  constructor(props) {
    super(props);

    this.selectScenario = this.selectScenario.bind(this);

    this.state = {
      scenarioName: '',
      busy: true,
    };
  }

  componentWillMount() {
    this.props[REQUEST_SCENARIOS_AUDIT]();
  }

  selectScenario(scenario) {
    this.setState({
      scenarioName: scenario,
    });
  }

  scenarioSelector() {
    const uniqueScenarios =
      this.props[SCENARIO_AUDIT_LIST] !== undefined
        ? this.props[SCENARIO_AUDIT_LIST].filter(
            (auditEntry, index, self) =>
              self.findIndex(
                t => t.scenarioName === auditEntry.scenarioName
              ) === index
          )
        : [];

    return (
      <DropdownButton
        componentClass={InputGroup.Button}
        bsSize="small"
        id="input-dropdown-addon"
        title={this.state.scenarioName !== '' ? this.state.scenarioName : 'All'}
      >
        <MenuItem key="1" selected onSelect={() => this.selectScenario('')}>
          All
        </MenuItem>
        {uniqueScenarios.sort(sortByName).map((s, idx) => {
          /* eslint-disable react/no-array-index-key */
          if (this.state.scenarioName === s.scenarioName) {
            return (
              <MenuItem
                key={idx}
                onSelect={() => this.selectScenario(s.scenarioName)}
                active
              >
                {s.scenarioName}
              </MenuItem>
            );
          }
          return (
            <MenuItem
              key={idx}
              onSelect={() => this.selectScenario(s.scenarioName)}
            >
              {s.scenarioName}
            </MenuItem>
          );
        })}
      </DropdownButton>
    );
  }

  render() {
    const { busy } = this.props;
    return (
      <div
        className={classNames('scenarioContainer', 'scenarioAuditContainer', {
          busy,
        })}
      >
        <div>
          <h1>Scenario Audit</h1>
        </div>
        <div style={{ display: 'flex' }}>
          <div id="container">
            <div className="box">
              <h3 key={1}>Active scenario:</h3>
            </div>
            <div className="box">{this.scenarioSelector()}</div>
          </div>
          <div className="alignRight">
            <GlyphButton
              onCellClicked={() => {
                this.scenarioAuditComponent.exportToExcel();
              }}
              iconName="download-alt"
              className="scenarioAuditContainer__download-cell"
              tooltipText="Download as CSV"
            />
          </div>
        </div>
        <div style={{ height: '90%' }}>
          <ScenarioAuditTableComponent
            ref={instance => {
              this.scenarioAuditComponent = instance;
            }}
            scenarioName={this.state.scenarioName}
            scenarioList={this.props[SCENARIO_AUDIT_LIST]}
            {...{ [FILTER]: this.props[FILTER] }}
          />
        </div>
      </div>
    );
  }
}

ScenarioAuditContainer.PropTypes = {
  [SCENARIO_AUDIT_LIST]: PropTypes.arrayOf(PropTypes.object).isRequired,
  busy: PropTypes.string,
  [FILTER]: PropTypes.string.isRequired,
};

export default ScenarioAuditContainer;
