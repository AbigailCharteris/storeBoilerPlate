import classNames from 'classnames';
import _ from 'lodash';
import Card from 'react-toolbox/lib/card/Card';
import React from 'react';
import { createSelector } from 'reselect';
import PropTypes from 'prop-types';
import { AgGridReact, reactCellRendererFactory } from 'ag-grid-react';
import {
  FieldGroup,
  Modal,
  Button,
  Checkbox,
  FormGroup,
  ControlLabel,
  FormControl,
} from 'react-bootstrap';
import formatDate from './../../shared/dateTime';
import { CAN_EDIT, FILTER } from '../../constants/stateConstants';
import AuditEntry from './../../model/auditEntry';

const defaultColDef = {
  headerClass: 'scenarios__header-cell',
  cellClass: 'scenarios__cell',
  suppressMenu: true,
  overlayLoadingTemplate:
    '<span class="ag-overlay-loading-center">Please wait...</span>',
};

const getColumnDefs = () => [
  {
    headerName: 'Id',
    field: 'scenario.id',
    cellClass: 'scenario-audit-dialog__description-cell',
    minWidth: 220,
    suppressSorting: true,
  },
  {
    headerName: 'Scenario Name',
    field: 'scenario.scenarioName',
    cellClass: 'scenario-audit-dialog__name-cell',
    minWidth: 200,
    suppressSorting: true,
  },
  {
    headerName: 'Category',
    field: 'scenario.shockClassification',
    cellClass: 'scenario-audit-dialog__updatedBy-cell',
    minWidth: 70,
    maxWidth: 70,
    suppressSorting: true,
  },
  {
    headerName: 'File Version',
    field: 'scenario.fileVersion',
    cellClass: 'scenario-audit-dialog__updated-cell',
    minWidth: 80,
    maxWidth: 80,
  },
  {
    headerName: 'Reason for change',
    field: 'scenario.deltaComment',
    cellClass: 'scenario-audit-dialog__updatedBy-cell',
    minWidth: 120,
    suppressSorting: true,
  },
  {
    headerName: 'Action',
    field: 'action',
    cellClass: 'scenario-audit-dialog__updated-cell',
    minWidth: 70,
    maxWidth: 70,
  },
  {
    headerName: 'Updated',
    field: 'timestamp',
    cellClass: 'scenario-audit-dialog__updated-cell',
    minWidth: 100,
    maxWidth: 100,
    cellRenderer: ({ value }) => formatDate(value),
  },
  {
    headerName: 'Updated By',
    field: 'updatedBy',
    cellClass: 'scenario-audit-dialog__updatedBy-cell',
    minWidth: 180,
  },
  {
    headerName: '',
    field: 'defaultCol',
    cellClass: 'scenarios__updatedBy-cell',
    minWidth: 10,
    maxWidth: 10,
  },
];

const sortModel = [
  {
    colId: 'timestamp',
    sort: 'desc',
  },
];

const adaptAuditEntry = audit => ({
  updatedBy: audit.updatedBy,
  timestamp: audit.timestamp,
  scenario: audit.scenario,
  deltaComment: audit.deltaComment,
  action: audit.action,
});

class ScenarioAuditTableComponent extends React.PureComponent {
  constructor() {
    super();

    this.initialState = {
      busy: true,
      isReady: false,
      selectedVersion: undefined,
      currentSelectedVersion: undefined,
      rowData: [],
    };
    this.state = this.initialState;

    this.onGridReady = this.onGridReady.bind(this);
    this.filterColumn = this.filterColumn.bind(this);
    this.exportToExcel = this.exportToExcel.bind(this);

    this.sizeColumnsToFit = _.debounce(this.sizeColumnsToFit.bind(this), 500);

    this.getColumnDefs = createSelector(
      props => props[CAN_EDIT],
      getColumnDefs
    );
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.scenarioList) {
      this.scenariolist = nextProps.scenarioList;
      if (this.agGrid) {
        this.agGrid.api.showLoadingOverlay();
      }

      const scenariofilter = nextProps.scenarioList.filter(
        b =>
          b.scenarioName ===
          (nextProps.scenarioName === ''
            ? b.scenarioName
            : nextProps.scenarioName)
      );

      const auditlist = scenariofilter.map(y => y.auditList);

      let combinedLists = [];
      if (auditlist !== undefined && auditlist !== [] && auditlist.length > 0)
        combinedLists = auditlist.reduce((a, b) => [...a, ...b]);

      const auditEntryList = combinedLists
        .filter(f => f.scenario !== undefined)
        .map(adaptAuditEntry);

      // we're forced to dedupe the audit entries as the server file system
      //  creates duplicate entries when changing active versions
      const uniqueAuditEntries = auditEntryList.filter(
        (auditEntry, index, self) =>
          self.findIndex(
            t =>
              t.scenario.scenarioName === auditEntry.scenario.scenarioName &&
              t.scenario.shockClassification ===
                auditEntry.scenario.shockClassification &&
              t.scenario.fileVersion === auditEntry.scenario.fileVersion &&
              t.scenario.deltaComment === auditEntry.scenario.deltaComment &&
              t.action === auditEntry.action &&
              t.timestamp === auditEntry.timestamp &&
              t.updatedBy === auditEntry.updatedBy
          ) === index
      );

      const filteredUniqueEntries = uniqueAuditEntries.filter(
        b =>
          b.scenario.scenarioName ===
          (nextProps.scenarioName === ''
            ? b.scenario.scenarioName
            : nextProps.scenarioName)
      );

      this.setState({
        isReady: true,
        busy: false,
        rowData: filteredUniqueEntries,
      });
    }

    if (nextProps[FILTER] || nextProps[FILTER] === '') {
      this.filterColumn(nextProps[FILTER]);
    }
  }

  onGridReady(agGrid) {
    this.agGrid = agGrid;

    this.state.rowData.forEach((row, index) => agGrid.api.sizeColumnsToFit());

    if (this.agGrid) agGrid.api.setSortModel(sortModel);

    this.sizeColumnsToFit(() => this.setState({ isReady: true, busy: false }));
  }

  exportToExcel() {
    if (!this.agGrid) return;

    const params = {
      skipHeader: false,
      columnGroups: true,
      skipFooters: true,
      skipGroups: true,
      skipPinnedTop: true,
      skipPinnedBottom: true,
      allColumns: true,
      onlySelected: true,
      suppressQuotes: true,
      fileName: `Scenario_Audit_${Date.now()}.csv`,
      columnSeparator: ',',
    };

    this.agGrid.api.exportDataAsCsv(params);
  }

  sizeColumnsToFit(callback) {
    if (this.agGrid) {
      this.agGrid.api.sizeColumnsToFit();
    }

    if (_.isFunction(callback)) {
      callback();
    }
  }

  filterColumn(filterVal) {
    if (!this.agGrid) return;

    this.agGrid.api.setQuickFilter(filterVal);
  }

  render() {
    const { busy, isReady, rowData } = this.state;
    const columnDefs = this.getColumnDefs(this);

    return (
      <div
        className={classNames(
          'ag-grid ag-fresh sc-grid',
          this.props.busy ? 'busy' : '',
          this.props.className
        )}
        style={{ height: '90%' }}
      >
        <Card
          className={classNames(
            'ag-fresh ag-grid sc-grid',
            'scenarios__card',
            { busy },
            {
              'scenarios__card--hidden': !isReady,
            }
          )}
        >
          <div className="scenarios__grid-container" style={{ height: '100%' }}>
            <AgGridReact
              columnDefs={columnDefs}
              defaultColDef={defaultColDef}
              enableColResize
              editType="fullRow"
              enableFilter={false}
              enableSorting
              onGridReady={this.onGridReady}
              onAfterSortChanged={this.onAfterSortChanged}
              onRowClicked={this.onRowClicked}
              onSelectionChanged={this.onSelectionChanged}
              rowClass="scenario-audit-dialog__row"
              rowData={rowData}
              rowSelection="single"
              suppressContextMenu
              suppressMovableColumns
              suppressRowClickSelection
            />
          </div>
        </Card>
      </div>
    );
  }
}

ScenarioAuditTableComponent.propTypes = {
  scenarioName: PropTypes.string,
  scenarioList: PropTypes.arrayOf(PropTypes.object),
};

ScenarioAuditTableComponent.defaultProps = {
  scenarioName: '',
  scenarioList: [],
};

export default ScenarioAuditTableComponent;
