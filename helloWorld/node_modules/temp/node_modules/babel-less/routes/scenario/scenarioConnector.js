import React from 'react';
import { connect } from 'react-redux';
import requestScenarios from './../../actions/requestScenariosAction';
import saveScenario from './../../actions/saveScenarioAction';
import { update } from './../../actions/scenarioListAction';
import {
  CONFIGURATION as CONFIGURATION_REDUCER,
  SCENARIOS,
} from './../../constants/reducerTypes';
import {
  CAN_EDIT,
  SCENARIO_LIST,
  SCENARIO_VERSION_LIST,
  SELECTED_SCENARIOS,
  FILTER,
} from '../../constants/stateConstants';
import {
  ARCHIVE_SCENARIO,
  REQUEST_SCENARIO_VERSIONS,
  REQUEST_SCENARIOS,
  RESET_SCENARIO_VERSIONS,
  SAVE_SCENARIO,
  SET_SCENARIO_VERSION,
  UPDATE_SELECTED_SCENARIOS,
} from './../../constants/actionTypes';
import archiveScenarioAction from './../../actions/archiveScenarioAction';
import requestScenarioVersionsAction from './../../actions/requestScenarioVersionsAction';
import setScenarioVersionAction from './../../actions/setScenarioVersionAction';
import resetScenarioVersions from './../../actions/resetScenarioVersionsAction';
import { CONFIGURATION_STATE } from '../../../services/constants/stateConstants';
import getSettings from '../../../services/selectors/getSettings';
import getPrinciple from '../../../auth/selectors/getPrinciple';
import Entitlement from '../../../auth/model/entitlement';

/* Externalise connecting to redux */

const mapStateToProps = state => {
  const newState = {
    [SCENARIO_LIST]: state[SCENARIOS][SCENARIO_LIST],
    [SELECTED_SCENARIOS]: state[SCENARIOS][SELECTED_SCENARIOS],
    [SCENARIO_VERSION_LIST]: state[SCENARIOS][SCENARIO_VERSION_LIST] || [],
    [CONFIGURATION_STATE]: getSettings(CONFIGURATION_REDUCER, state),
    [FILTER]: state[SCENARIOS][FILTER],
    [CAN_EDIT]:
      getPrinciple(state).hasRole('ADMIN') ||
      getPrinciple(state).hasOneOrMoreEntitlements(
        Entitlement.from('ui.batch-management', 'read-write')
      ),
  };

  return newState;
};

const mapActionsToProps = {
  [REQUEST_SCENARIOS]: requestScenarios,
  [SAVE_SCENARIO]: saveScenario,
  [UPDATE_SELECTED_SCENARIOS]: update,
  [ARCHIVE_SCENARIO]: archiveScenarioAction,
  [REQUEST_SCENARIO_VERSIONS]: requestScenarioVersionsAction,
  [SET_SCENARIO_VERSION]: setScenarioVersionAction,
  [RESET_SCENARIO_VERSIONS]: resetScenarioVersions,
};

const connector = Component =>
  connect(mapStateToProps, mapActionsToProps)(Component);

export default connector;
