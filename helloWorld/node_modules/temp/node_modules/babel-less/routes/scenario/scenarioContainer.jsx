import classNames from 'classnames';
import React, { PropTypes } from 'react';

import {
  CAN_EDIT,
  SCENARIO_LIST,
  SCENARIO_VERSION_LIST,
  SELECTED_SCENARIOS,
  FILTER,
} from '../../constants/stateConstants';

import {
  ARCHIVE_SCENARIO,
  REQUEST_SCENARIO_VERSIONS,
  REQUEST_SCENARIOS,
  RESET_SCENARIO_VERSIONS,
  SAVE_SCENARIO,
  SET_SCENARIO_VERSION,
  UPDATE_SELECTED_SCENARIOS,
} from '../../constants/actionTypes';

import SaveScenario from '../../model/saveScenarioRequest';
import ScenarioVersionDetail from '../../model/scenarioVersionDetail';
import Scenarios from './scenarios';
import { CONFIGURATION_STATE } from '../../../services/constants/stateConstants';

class ScenarioContainer extends React.Component {
  constructor(props) {
    super(props);
    this.selectScenario = this._selectScenario.bind(this);
    this.createScenario = this._createScenario.bind(this);
    this.removeScenario = this._removeScenario.bind(this);
    this.updateScenario = this._updateScenario.bind(this);
    this.requestScenarioVersions = this._requestScenarioVersions.bind(this);
    this.setScenarioVersion = this._setScenarioVersion.bind(this);
    this.resetScenarioVersionList = this._resetScenarioVersionList.bind(this);
  }

  componentWillMount() {
    this.props[REQUEST_SCENARIOS]();
  }

  _createScenario(data) {
    const scenario = new SaveScenario(
      undefined,
      data.fields.scenarioName,
      data.fields.description,
      data.fields.scenarioFile,
      undefined,
      data.fields.shockClassification,
      data.fields.deltaComment
    );

    return this.props[SAVE_SCENARIO](scenario);
  }

  _removeScenario(data) {
    return this.props[ARCHIVE_SCENARIO](data.scenarioIds);
  }

  _requestScenarioVersions(scenarioId) {
    return this.props[REQUEST_SCENARIO_VERSIONS](scenarioId);
  }

  _resetScenarioVersionList() {
    this.props[RESET_SCENARIO_VERSIONS]();
  }

  _selectScenario(value) {
    this.props[UPDATE_SELECTED_SCENARIOS](value);
  }

  _setScenarioVersion(data) {
    if (!this.props[CAN_EDIT]) return;

    const request = new ScenarioVersionDetail(
      data.id,
      data.scenarioName,
      data.description,
      data.fileVersion,
      data.shockClassification,
      data.deltaComment
    );

    this.props[SET_SCENARIO_VERSION](request);
  }

  _updateScenario(data) {
    const scenario = new SaveScenario(
      data.fields.id,
      data.fields.scenarioName,
      data.fields.description,
      data.fields.scenarioFile,
      data.fields.auditList,
      data.fields.shockClassification,
      data.fields.deltaComment
    );

    return this.props[SAVE_SCENARIO](scenario);
  }

  render() {
    const { busy } = this.props;
    const config = { [CONFIGURATION_STATE]: this.props[CONFIGURATION_STATE] };

    return (
      <div className={classNames('scenarioContainer', { busy })}>
        <h1>Scenario Manager</h1>
        {
          <Scenarios
            scenarioList={this.props[SCENARIO_LIST]}
            scenarioRequests={null}
            selectedScenarios={this.props[SELECTED_SCENARIOS]}
            scenariosSortModel={null}
            sortScenarios={null}
            selectScenarios={this.selectScenario}
            createScenario={this.createScenario}
            removeScenario={this.removeScenario}
            updateScenario={this.updateScenario}
            scenarioVersionList={this.props[SCENARIO_VERSION_LIST]}
            requestScenarioVersions={this.requestScenarioVersions}
            requestScenarios={this.props[REQUEST_SCENARIOS]}
            setScenarioVersion={this.setScenarioVersion}
            resetScenarioVersionList={this.resetScenarioVersionList}
            {...{ [FILTER]: this.props[FILTER] }}
            {...{ [CAN_EDIT]: this.props[CAN_EDIT] }}
            {...config}
          />
        }
      </div>
    );
  }
}

ScenarioContainer.PropTypes = {
  [SCENARIO_LIST]: PropTypes.arrayOf(PropTypes.object).isRequired,
  [SCENARIO_VERSION_LIST]: PropTypes.arrayOf(PropTypes.object).isRequired,
  [REQUEST_SCENARIOS]: PropTypes.func.isRequired,
  [SAVE_SCENARIO]: PropTypes.func.isRequired,
  [REQUEST_SCENARIO_VERSIONS]: PropTypes.func.isRequired,
  [SET_SCENARIO_VERSION]: PropTypes.func.isRequired,
  [RESET_SCENARIO_VERSIONS]: PropTypes.func.isRequired,
  [CONFIGURATION_STATE]: PropTypes.object.isRequired,
  [CAN_EDIT]: PropTypes.bool.isRequired,
  [FILTER]: PropTypes.string.isRequired,
};

export default ScenarioContainer;
