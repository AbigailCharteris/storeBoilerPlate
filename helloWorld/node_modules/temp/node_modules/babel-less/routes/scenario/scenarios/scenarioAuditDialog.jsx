import classNames from 'classnames';
import _ from 'lodash';
import Card from 'react-toolbox/lib/card/Card';
import React from 'react';
import { createSelector } from 'reselect';
import PropTypes from 'prop-types';
import { AgGridReact, reactCellRendererFactory } from 'ag-grid-react';
import {
  FieldGroup,
  Modal,
  Button,
  Checkbox,
  FormGroup,
  ControlLabel,
  FormControl,
} from 'react-bootstrap';
import CheckboxCell, { FIELDBINDING } from './checkboxCell';
import formatDate from './../../../shared/dateTime';
import { CAN_EDIT } from '../../../constants/stateConstants';
import DeltaCommentComponent from '../../../shared/components/deltaCommentComponent';

const defaultColDef = {
  headerClass: 'scenarios__header-cell',
  cellClass: 'scenarios__cell',
  suppressMenu: true,
  overlayLoadingTemplate:
    '<span class="ag-overlay-loading-center">Please wait...</span>',
};

const getColumnDefs = selectFileVersion => [
  {
    headerName: 'Active',
    minWidth: 45,
    maxWidth: 45,
    cellClass: 'scenario-audit-dialog__checkbox-cell',
    cellRenderer: reactCellRendererFactory(cellProps => (
      <CheckboxCell
        isSelectedBinding={FIELDBINDING}
        isCheckedBindingName="active"
        cellProps={cellProps}
        callBack={selectFileVersion}
        className="scenario-audit-dialog__checkbox-cell"
      />
    )),
    suppressSorting: true,
  },
  {
    headerName: 'Scenario Name',
    field: 'scenarioName',
    cellClass: 'scenario-audit-dialog__name-cell',
    minWidth: 200,
    suppressSorting: true,
  },
  {
    headerName: 'Description',
    field: 'description',
    cellClass: 'scenario-audit-dialog__description-cell',
    minWidth: 200,
    suppressSorting: true,
  },
  {
    headerName: 'Single Shock',
    field: 'shockClassification',
    cellClass: 'scenario-audit-dialog__updatedBy-cell',
    minWidth: 90,
    maxWidth: 90,
    suppressSorting: true,
  },
  {
    headerName: 'Version',
    field: 'fileVersion',
    cellClass: 'scenario-audit-dialog__updated-cell',
    minWidth: 70,
    maxWidth: 120,
  },
  {
    headerName: 'Updated By',
    field: 'updatedBy',
    cellClass: 'scenario-audit-dialog__updatedBy-cell',
    minWidth: 150,
    maxWidth: 200,
    suppressSorting: true,
  },
  {
    headerName: 'Updated',
    field: 'timestamp',
    cellClass: 'scenario-audit-dialog__updated-cell',
    minWidth: 120,
    maxWidth: 150,
    cellRenderer: ({ value }) => formatDate(value),
    suppressSorting: true,
  },
];

const sortModel = [
  {
    colId: 'fileVersion',
    sort: 'desc',
  },
];

const calcGridHeight = rowData =>
  rowData && rowData.length >= 5 ? '500px' : '220px';

class ScenarioAuditDialog extends React.Component {
  constructor() {
    super();

    this.initialState = {
      busy: true,
      isReady: false,
      selectedVersion: undefined,
      currentSelectedVersion: undefined,
      rowData: [],
      deltaComment: '',
      commentValidated: false,
      isSaving: false,
      isSaved: false,
    };
    this.state = this.initialState;

    this.onClose = this.onClose.bind(this);
    this.onGridReady = this.onGridReady.bind(this);
    this.sizeColumnsToFit = _.debounce(this.sizeColumnsToFit.bind(this), 500);
    this.saveScenarioVersion = this.saveScenarioVersion.bind(this);
    this.setScenarioVersion = this.setScenarioVersion.bind(this);
    this.getActionButtons = this.getActionButtons.bind(this);
    this.onChangeDeltaComment = this.onChangeDeltaComment.bind(this);
    this.canSave = this.canSave.bind(this);

    this.getColumnDefs = createSelector(
      props => props.setScenarioVersion,
      props => props[CAN_EDIT],
      getColumnDefs
    );
  }

  componentWillReceiveProps(nextProps) {
    if (!this.props.active && nextProps.active) {
      this.scenario = nextProps.scenario;
      if (this.agGrid) {
        this.agGrid.api.showLoadingOverlay();
      }
    }

    if (
      this.props.active &&
      nextProps.scenarioVersionList &&
      this.state.rowData.length === 0
    ) {
      const selectedVersion = nextProps.scenarioVersionList.find(v => v.active);

      const data =
        (this.state.rowData === [] || this.state.rowData.length === 0) &&
        nextProps.scenarioVersionList !== undefined
          ? nextProps.scenarioVersionList
          : [];

      this.setState({
        isReady: true,
        busy: false,
        currentSelectedVersion: selectedVersion,
        rowData: data,
      });
    }
  }

  onGridReady(agGrid) {
    this.agGrid = agGrid;

    this.state.rowData.forEach((row, index) => agGrid.api.sizeColumnsToFit());

    if (this.agGrid) agGrid.api.setSortModel(sortModel);

    this.sizeColumnsToFit(() => this.setState({ isReady: true, busy: false }));
  }

  onClose() {
    if (!this.state.busy) {
      this.props.onClose();
      this.state = this.initialState;
    }
  }

  onChangeDeltaComment(proxy) {
    const value = proxy.currentTarget.value;

    this.setState({
      deltaComment: value,
      commentValidated: value.length > 19,
    });
  }

  getActionButtons() {
    return (
      <div>
        <div>
          <Button value="Cancel" bsStyle="default" onClick={this.onClose}>
            Close
          </Button>
          {this.props[CAN_EDIT] ? (
            <Button
              onClick={this.saveScenarioVersion}
              bsStyle="primary"
              disabled={!this.canSave()}
            >
              <div className="batchContainer__save-btn-wrapper">
                <span className="batchContainer__save-btn-text">
                  {this.state.isSaving && 'Saving'}
                  {this.state.isSaved && !this.state.isSaving && 'Saved'}
                  {!this.state.isSaved && !this.state.isSaving && 'Save'}
                </span>
                {this.state.isSaved &&
                !this.state.isSaving && <i className="fa fa-check" />}
              </div>
            </Button>
          ) : null}
        </div>
      </div>
    );
  }

  setScenarioVersion(data) {
    if (data && data.fileVersion && this.props[CAN_EDIT]) {
      const saveChange =
        this.state.currentSelectedVersion &&
        this.state.currentSelectedVersion.fileVersion !== data.fileVersion;
      /* eslint-disable no-param-reassign */
      this.props.scenarioVersionList.map(
        // eslint-disable-next-line no-return-assign
        s => (s.active = s.fileVersion === data.fileVersion)
      );
      /* eslint-disable no-param-reassign */

      this.setState(
        {
          selectedVersion: data,
          rowData: this.props.scenarioVersionList,
          deltaComment: '',
          commentValidated: false,
          isSaved: false,
          isSaving: false,
        },
        () => this.agGrid.api.setRowData()
      );
    }
  }

  canSave() {
    return (
      this.state.currentSelectedVersion &&
      this.state.currentSelectedVersion.fileVersion !==
        this.state.selectedVersion &&
      this.state.commentValidated
    );
  }

  saveScenarioVersion() {
    if (this.props[CAN_EDIT] && this.state.selectedVersion) {
      new Promise(resolve => {
        this.setState({ busy: true, isSaving: true }, resolve);
      })
        .then(() => {
          this.state.selectedVersion.deltaComment = this.state.deltaComment;
          this.props.setScenarioVersion(this.state.selectedVersion);
        })
        .then(
          () =>
            new Promise(resolve =>
              this.setState(
                { busy: false, isSaving: false, isSaved: true },
                resolve
              )
            )
        );
    }
  }

  sizeColumnsToFit(callback) {
    if (this.agGrid) {
      this.agGrid.api.sizeColumnsToFit();
    }

    if (_.isFunction(callback)) {
      callback();
    }
  }

  render() {
    const { active, scenarioVersionList } = this.props;
    const {
      busy,
      isReady,
      rowData,
      selectedVersion,
      commentValidated,
      deltaComment,
    } = this.state;

    const columnDefs = this.getColumnDefs(this);
    const modalHeight = calcGridHeight(rowData);

    const showModalWhenReady = active;

    const existingComment =
      this.state.currentSelectedVersion &&
      this.state.selectedVersion === undefined
        ? this.state.currentSelectedVersion.deltaComment
        : '';

    return (
      <Modal
        className={classNames('scenario-audit-dialog', { busy })}
        show={showModalWhenReady}
        onHide={this.onClose}
      >
        <Modal.Header closeButton>
          <Modal.Title>Scenario File Version</Modal.Title>
        </Modal.Header>

        <Modal.Body>
          <div>
            <Card
              className={classNames(
                'ag-fresh ag-grid sc-grid',
                'scenarios__card',
                {
                  'scenarios__card--hidden': !isReady,
                }
              )}
            >
              <div
                className="scenario-audit-dialog__grid-container"
                style={{ height: modalHeight }}
              >
                <span
                  style={{
                    background: 'black',
                    opacity: 0.8,
                    width: '100%',
                    height: '100%',
                    visibility: this.state.busy ? 'visible' : 'collapse',
                  }}
                />
                <AgGridReact
                  columnDefs={columnDefs}
                  defaultColDef={defaultColDef}
                  enableColResize
                  editType="fullRow"
                  enableFilter={false}
                  enableSorting
                  onGridReady={this.onGridReady}
                  onAfterSortChanged={this.onAfterSortChanged}
                  onRowClicked={this.onRowClicked}
                  onSelectionChanged={this.onSelectionChanged}
                  rowClass="scenario-audit-dialog__row"
                  rowData={rowData}
                  rowSelection="single"
                  suppressContextMenu
                  suppressMovableColumns
                  suppressRowClickSelection
                />
              </div>
            </Card>
            <DeltaCommentComponent
              deltaComment={deltaComment}
              exsitingComment={existingComment}
              updateDeltaComment={this.onChangeDeltaComment}
              predicate={this.state.selectedVersion === undefined}
            />
          </div>
        </Modal.Body>
        <Modal.Footer>{this.getActionButtons()}</Modal.Footer>
      </Modal>
    );
  }
}

ScenarioAuditDialog.propTypes = {
  active: PropTypes.bool.isRequired,
  scenario: PropTypes.shape({
    id: PropTypes.string,
    scenarioName: PropTypes.string.isRequired,
    description: PropTypes.string,
  }),
  scenarioVersionList: PropTypes.arrayOf(PropTypes.object).isRequired,
  onClose: PropTypes.func.isRequired,
  setScenarioVersion: PropTypes.func.isRequired,
};

ScenarioAuditDialog.defaultProps = {
  scenario: {
    scenarioName: '',
  },
};

export default ScenarioAuditDialog;
