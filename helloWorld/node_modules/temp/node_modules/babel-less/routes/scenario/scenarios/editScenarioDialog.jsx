import classNames from 'classnames';
import _ from 'lodash';
import React from 'react';
import PropTypes from 'prop-types';
import {
  Button,
  ControlLabel,
  FieldGroup,
  FormControl,
  FormGroup,
  Modal,
} from 'react-bootstrap';
import ScenarioFilePicker from './editScenarioDialog/scenarioFilePicker';

export const ADD = 'ADD';
export const UPDATE = 'UPDATE';

class EditScenarioDialog extends React.Component {
  constructor() {
    super();

    this.initialState = {
      busy: false,
      fields: {},
      touched: {},
      validFields: {},
      isFormValid: false,
      validationError: false,
      nameCollisionError: false,
    };
    this.state = this.initialState;

    this.onClickUpload = this.onClickUpload.bind(this);
    this.onClose = this.onClose.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onRemove = this.onRemove.bind(this);
    this.onChangeDescription = this.handleProxyEvent.bind(this, 'description');
    this.onChangeDeltaComment = this.handleProxyEvent.bind(
      this,
      'deltaComment'
    );
    this.onChangeScenarioName = this.onChange.bind(this, 'scenarioName');
    this.onChangeClassification = this.handleProxyEvent.bind(
      this,
      'shockClassification'
    );
    this.validateScenarioName = this.validateScenarioName.bind(this);
    this.onChangeFile = this.onChangeFile.bind(this);
    this.onScenarioNameBlur = this.onScenarioNameBlur.bind(this);
    this.validationErrorMsg =
      'Please ensure no spaces or special characters are included in the Scenario Name - and _ are however permitted. ';
    this.nameCollisionErrorMsg = 'Scenario Name already in use.';
    this.pattern = /^[\w_-]*$/;
  }

  componentWillMount() {
    this.validateForm();
  }

  componentWillReceiveProps(nextProps) {
    if (!this.props.active && nextProps.active) {
      this.setState(this.initialState, () => this.validateForm());
    }
  }

  onChange(fieldName, value) {
    if (fieldName !== 'deltaComment' && !this.state.touched.deltaComment) {
      this.setState({
        fields: { deltaComment: '' },
        touched: { deltaComment: true },
      });
    }

    this.setState(
      prevState => ({
        ...prevState,
        fields: {
          ...prevState.fields,
          [fieldName]: value,
        },
        touched: {
          ...prevState.touched,
          [fieldName]: true,
        },
      }),
      () => this.validateForm()
    );
  }

  onChangeFile(result) {
    const { scenario } = this.props;
    const { fields, touched } = this.state;

    if (!result && touched.scenarioFile) {
      this.onChange('scenarioFile', null);

      if (fields.scenarioName || scenario.scenarioName) return; // don't overwrite existing scenario name if set

      this.validateScenarioName(
        touched.scenarioName ? fields.scenarioName : scenario.scenarioName
      );
      return;
    }

    this.onChange('scenarioFile', result.base64);
    if (!fields.scenarioName && !scenario.scenarioName)
      this.validateScenarioName(result.file.name, false);
  }

  onClickUpload() {
    this.fileInput.click();
  }

  onClose() {
    if (!this.state.busy) {
      this.props.onClose();
    }
  }

  onRemove() {
    new Promise(resolve => {
      this.setState({ busy: true }, resolve);
    })
      .then(() =>
        this.props.removeScenario({ scenarioIds: [this.props.scenario.id] })
      )
      .then(
        () => new Promise(resolve => this.setState({ busy: false }, resolve))
      )
      .then(this.onClose);
  }

  onScenarioNameBlur(value) {
    this.validateScenarioName(value.currentTarget.value);
  }

  onSubmit() {
    const { mode } = this.props;

    if (mode === ADD) {
      new Promise(resolve => {
        this.setState({ busy: true }, resolve);
      })
        .then(() =>
          this.props.createScenario({
            fields: {
              ..._.pick(this.props.scenario, 'scenarioName', 'description'),
              ..._.pickBy(
                this.state.fields,
                (__, fieldName) => this.state.touched[fieldName]
              ),
            },
          })
        )
        .then(
          () => new Promise(resolve => this.setState({ busy: false }, resolve))
        )
        .then(this.onClose);

      return;
    }

    if (mode === UPDATE) {
      new Promise(resolve => {
        this.setState({ busy: true }, resolve);
      })
        .then(() =>
          this.props.updateScenario({
            fields: {
              ..._.pick(
                this.props.scenario,
                'scenarioName',
                'description',
                'id',
                'auditList',
                'shockClassification',
                'deltaComment'
              ),
              ..._.pickBy(
                this.state.fields,
                (__, fieldName) => this.state.touched[fieldName]
              ),
            },
          })
        )
        .then(
          r => new Promise(resolve => this.setState({ busy: false }, resolve))
        )
        .then(this.onClose);
    }
  }

  getActionButtons() {
    const { fields, touched, isFormValid } = this.state;
    const { mode } = this.props;

    return (
      <div>
        <div className="edit-scenario-dialog__noticeDivLeft">
          <ul className="edit-scenario-dialog__wrapList">
            <li className="edit-scenario-dialog__wrapList">
              <b style={{ color: 'darkBlue' }}>Note:</b> Any new files saved
              will automatically be set
            </li>
            <li className="edit-scenario-dialog__wrapList">
              {' '}
              to active and applied to any relevant batches
            </li>
          </ul>
        </div>
        <div className="edit-scenario-dialog__noticeDivRight">
          <Button value="Cancel" bsStyle="default" onClick={this.onClose}>
            Cancel
          </Button>
          {mode === UPDATE ? (
            <Button value="Remove" bsStyle="default" onClick={this.onRemove}>
              Remove
            </Button>
          ) : null}
          <Button
            onClick={this.onSubmit}
            bsStyle="primary"
            disabled={!isFormValid}
          >
            Submit
          </Button>
        </div>
      </div>
    );
  }

  getActions() {
    const { fields, touched, isFormValid } = this.state;
    const { mode } = this.props;

    return [
      {
        label: 'Cancel',
        onClick: this.onClose,
      },
      ...(mode === UPDATE
        ? [
            {
              label: 'Remove',
              className: 'edit-scenario-dialog__remove-btn',
              onClick: this.onRemove,
            },
          ]
        : []),
      {
        label: 'Submit',
        onClick: this.onSubmit,
        primary: true,
        disabled: !isFormValid,
      },
    ];
  }

  getRequiredFields() {
    const { mode } = this.props;

    return {
      scenarioFile: mode === ADD,
      scenarioName: true,
      description: true,
      deltaComment: true,
    };
  }

  handleProxyEvent(fieldName, proxy) {
    this.onChange(fieldName, proxy.currentTarget.value);
  }

  validateForm() {
    const { mode, scenario } = this.props;
    const { touched, fields } = this.state;
    const requiredFields = this.getRequiredFields();

    let isFormValid = Object.keys(requiredFields).every(
      fieldName =>
        requiredFields[fieldName]
          ? fields[fieldName] || scenario[fieldName]
          : true
    );

    isFormValid = isFormValid && this.pattern.test(fields.scenarioName);
    isFormValid =
      isFormValid && fields.deltaComment && fields.deltaComment.length > 19;

    if (!isFormValid) {
      this.setState({ isFormValid });
      return;
    }

    switch (mode) {
      case UPDATE:
        isFormValid = Object.keys(touched).length > 0;
        break;

      default:
        break;
    }

    this.setState({ isFormValid });
  }

  validateScenarioName(proxy, isProxy = true) {
    const value = isProxy ? proxy.currentTarget.value : proxy;

    this.setState({ validationError: !this.pattern.test(value) }); // no special chars

    if (
      value !== this.props.scenario.scenarioName // ignore current name
    )
      this.setState({
        nameCollisionError: this.props.validateScenarioNameCollision(value),
      }); // check name is unique

    this.onChangeScenarioName(value);
  }

  render() {
    const { active, mode, scenario } = this.props;
    const { busy, fields, touched } = this.state;

    const actions = this.getActions();
    const requiredFields = this.getRequiredFields();
    const scenarioName = touched.scenarioName
      ? fields.scenarioName
      : scenario.scenarioName;
    const description = touched.description
      ? fields.description
      : scenario.description;
    const deltaComment = touched.deltaComment
      ? fields.deltaComment
      : scenario.deltaComment;
    const shockClassification = touched.shockClassification
      ? fields.shockClassification
      : scenario.shockClassification;
    const deltaCommentInValid =
      deltaComment !== undefined && deltaComment.length < 20;
    const isFormDirty = Object.keys(this.state.touched).length > 0;

    return (
      <Modal
        className={classNames('edit-scenario-dialog', { busy })}
        show={active}
        onHide={this.onClose}
      >
        <Modal.Header closeButton>
          <Modal.Title>
            {mode === UPDATE ? 'Update Scenario' : 'Add Scenario'}
          </Modal.Title>
        </Modal.Header>

        <Modal.Body>
          <div className="edit-scenario-dialog__content">
            <ScenarioFilePicker
              accept=".csv"
              label={mode === UPDATE ? 'Replace File' : 'Choose File'}
              onChange={this.onChangeFile}
              raised
              required={requiredFields.scenarioFile}
            />
            <div>
              <FormGroup
                validationState={
                  (scenarioName &&
                    (this.state.validationError || this.state.nameCollisionError
                      ? 'error'
                      : 'success')) ||
                  null
                }
              >
                <ControlLabel>
                  Scenario Name<font color="red"> *</font>
                </ControlLabel>
                <FormControl
                  type="text"
                  id="ScenarioName"
                  value={scenarioName}
                  onChange={this.validateScenarioName}
                  onBlur={this.validateScenarioName}
                  maxLength={255}
                />
                <FormControl.Feedback value={this.validationErrorMsg} />
              </FormGroup>
              {this.state.validationError ? (
                <span style={{ color: 'red', 'font-size': '8pt' }}>
                  {this.validationErrorMsg}
                </span>
              ) : null}
              {this.state.nameCollisionError ? (
                <span style={{ color: 'red', 'font-size': '8pt' }}>
                  {this.nameCollisionErrorMsg}
                </span>
              ) : null}
            </div>
            <FormGroup
              controlId="Description"
              validationState={description !== '' ? 'success' : null}
            >
              <ControlLabel>
                Description<font color="red"> *</font>
              </ControlLabel>
              <FormControl
                type="text"
                value={description}
                onChange={this.onChangeDescription}
                maxLength={255}
              />
              <FormControl.Feedback />
            </FormGroup>
            <FormGroup controlId="shockClassification">
              <ControlLabel>
                Scenario Category<font color="red"> *</font>
              </ControlLabel>
              <FormControl
                componentClass="select"
                placeholder="select"
                value={shockClassification}
                onChange={this.onChangeClassification}
                className="edit-scenario-dialog__Select"
              >
                <option value="Global">Global</option>
                <option value="Localised">Localised</option>
              </FormControl>
            </FormGroup>
            <div>
              <FormGroup
                controlId="deltaComment"
                validationState={deltaCommentInValid ? 'error' : 'success'}
              >
                <ControlLabel>
                  Reason for change<font color="red"> *</font>
                </ControlLabel>
                <FormControl
                  type="text"
                  value={deltaComment}
                  onChange={this.onChangeDeltaComment}
                  maxLength={255}
                  disabled={!isFormDirty}
                />
                <FormControl.Feedback />
              </FormGroup>
              {deltaCommentInValid ? (
                <span style={{ color: 'red', 'font-size': '8pt' }}>
                  {'Minimum 20 characters are required'}
                </span>
              ) : null}
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer>{this.getActionButtons()}</Modal.Footer>
      </Modal>
    );
  }
}

EditScenarioDialog.propTypes = {
  active: PropTypes.bool.isRequired,
  mode: PropTypes.oneOf([ADD, UPDATE]).isRequired,
  scenario: PropTypes.shape({
    id: PropTypes.string,
    scenarioName: PropTypes.string.isRequired,
    description: PropTypes.string.isRequired,
  }),
  onClose: PropTypes.func.isRequired,
  createScenario: PropTypes.func.isRequired,
  removeScenario: PropTypes.func.isRequired,
  updateScenario: PropTypes.func.isRequired,
  validateScenarioNameCollision: PropTypes.func.isRequired,
};

EditScenarioDialog.defaultProps = {
  scenario: {
    scenarioName: '',
    description: '',
  },
  mode: ADD,
};

export default EditScenarioDialog;
