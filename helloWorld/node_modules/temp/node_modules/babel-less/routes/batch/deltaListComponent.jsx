import PropTypes from 'prop-types';
import React from 'react';
import { Tooltip, OverlayTrigger, Glyphicon } from 'react-bootstrap';

import { CSSTransitionGroup } from 'react-transition-group';

export const VALUE = 'value';

const formatLongDisplay = value => {
  if (value === '' || value === undefined) return null;

  let result = <span>{value}</span>;
  const tooltip = <Tooltip id="tooltip">{value}</Tooltip>;

  if (value.length > 40) {
    result = (
      <OverlayTrigger placement="top" overlay={tooltip}>
        <span>{value.substring(0, 40)}...</span>
      </OverlayTrigger>
    );
  }
  return result;
};

const setDisplayClass = (id, added, removed) => {
  if (id === null) return 'list-group-item';

  const x = added.find(s => s.id === id);

  if (added && added.find(s => s.id === id) !== undefined) {
    return 'list-group-item added';
  }

  if (removed && removed.find(s => s.id === id) !== undefined) {
    return 'list-group-item removed';
  }

  return 'list-group-item';
};

const setListItem = (s, idx, id, value, added, removed) => {
  const result = (
    <li key={idx} className="list-group-item">
      {formatLongDisplay(s[value])}
    </li>
  );

  if (s[id] === null) {
    return result;
  }

  if (added && added.find(x => x.id === s[id]) !== undefined) {
    return (
      <li key={idx} className="list-group-item added">
        {formatLongDisplay(s[value])}{' '}
        <Glyphicon glyph="plus" className="iconCell" />
      </li>
    );
  }

  if (removed && removed.find(x => x.id === s[id]) !== undefined) {
    return (
      <li key={idx} className="list-group-item added removed">
        {formatLongDisplay(s[value])}{' '}
        <Glyphicon glyph="trash" className="iconCell" />
      </li>
    );
  }

  return result;
};

const DeltaListComponent = ({
  dataList,
  header,
  subHeader,
  id,
  value,
  added,
  removed,
}) => (
  <div>
    <span>{header && header.length ? <h3> {header} </h3> : null}</span>
    <ul className="list-group delta-list-group">
      <CSSTransitionGroup
        transitionName="delta-list-group"
        transitionEnterTimeout={500}
        transitionLeaveTimeout={300}
      >
        {dataList.map((s, idx) =>
          setListItem(s, idx, id, value, added, removed)
        )}
      </CSSTransitionGroup>
    </ul>
    {subHeader && subHeader.length ? <h5> {subHeader} </h5> : null}
  </div>
);

DeltaListComponent.propTypes = {
  dataList: PropTypes.arrayOf(PropTypes.object).isRequired,
  added: PropTypes.arrayOf(PropTypes.object).isRequired,
  removed: PropTypes.arrayOf(PropTypes.object).isRequired,
  header: PropTypes.string.isRequired,
  subHeader: PropTypes.string,
  id: PropTypes.string,
  value: PropTypes.string,
};

DeltaListComponent.defaultProps = {
  header: undefined,
  selectedItem: undefined,
  subHeader: undefined,
  id: undefined,
  value: undefined,
  added: [],
  removed: [],
};

export default DeltaListComponent;
