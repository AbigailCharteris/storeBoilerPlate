import _ from 'lodash';
import React, { PropTypes } from 'react';
import {
  Button,
  Col,
  Grid,
  Row,
  FormGroup,
  FormControl,
  ControlLabel,
  Glyphicon,
} from 'react-bootstrap';
import classNames from 'classnames';
import {
  BATCH_LIST,
  CAN_EDIT,
  SCENARIO_LIST,
} from '../../constants/stateConstants';
import { REQUEST_BATCHES, SAVE_BATCH } from '../../constants/actionTypes';
import Batch from '../../model/batch';
import formatDate from '../../shared/dateTime';
import ListComponent, { VALUE } from '../../shared/components/listComponent';
import DeltaDialog from './deltaDialog';

const SELECTED_BATCH = 'SELECTED_BATCH';
const UNSELECTED_SCENARIOS = 'UNSELECTED_SCENARIOS';
const SELECTED_SCENARIOS = 'SELECTED_SCENARIOS';
const SELECTION_LIMIT = 'SELECTION_LIMIT';
const SELECTED_TARGET_BATCH = 'SELECTED_TARGET_BATCH';
const DELTA_COMMENT = 'DELTA_COMMENT';
const DELTA_FIELDS = 'DELTA_FIELDS';
const COMMENT_VALIDATED = 'COMMENT_VALIDATED';

const sortByScenarioName = (a, b) => {
  if (a.scenarioName < b.scenarioName) {
    return -1;
  }
  if (a.scenarioName > b.scenarioName) {
    return 1;
  }

  return 0;
};

class BatchContainer extends React.Component {
  constructor(props) {
    super(props);

    this.saveBatch = this._saveBatch.bind(this);
    this.selectBatch = this._selectBatch.bind(this);
    this.buildBatch = this._buildBatch.bind(this);
    this.isBatchDirty = this._isBatchDirty.bind(this);
    this.addScenario = this._addScenario.bind(this);
    this.removeScenario = this._removeScenario.bind(this);
    this.selectTargetBatch = this._selectTargetBatch.bind(this);
    this.updateDeltaComment = this._updateDeltaComment.bind(this);
    this.calculateDelta = this._calculateDelta.bind(this);
    this.deltaCount = this._deltaCount.bind(this);
    this.viewDelta = this._viewDelta.bind(this);
    this.closeModal = this._closeModal.bind(this);

    this.weekDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    this.weekDayLimit = 20;
    this.defaultLimit = 1;

    this.state = {
      [SELECTED_BATCH]: undefined,
      [SELECTED_TARGET_BATCH]: undefined,
      [UNSELECTED_SCENARIOS]: [],
      [SELECTED_SCENARIOS]: [],
      [SELECTION_LIMIT]: 1,
      [DELTA_COMMENT]: '',
      [DELTA_FIELDS]: { added: [], removed: [], combined: [] },
      [COMMENT_VALIDATED]: false,
      busy: true,
      isSaving: false,
      isSaved: false,
      isDeltaModalActive: false,
    };
  }

  componentWillMount() {
    this.props[REQUEST_BATCHES]();
  }

  componentWillReceiveProps(nextProps) {
    // updated selected batch/auditlist if it's changed, ignore all other props
    if (this.state[SELECTED_BATCH] !== undefined && nextProps[BATCH_LIST]) {
      const updatedSelectedBatch = nextProps[BATCH_LIST].find(
        batch => batch.id === this.state[SELECTED_BATCH].id
      );

      if (updatedSelectedBatch !== undefined) {
        this.setState({ busy: false });
        const existingAudit = this.state[SELECTED_BATCH].auditList;
        const updatedAudit = updatedSelectedBatch.auditList;

        const existingTimestamp =
          existingAudit[existingAudit.length - 1].timestamp;
        const updatedTimestamp =
          updatedAudit[updatedAudit.length - 1].timestamp;

        if (updatedTimestamp > existingTimestamp)
          this.setState({
            [SELECTED_BATCH]: updatedSelectedBatch,
            isSaved: true,
            isSaving: false,
          });
      }
    }
  }

  _verifySelectLimit() {
    const selectedCount = this.state[SELECTED_SCENARIOS].length;

    if (this.weekDays.indexOf(this.state[SELECTED_BATCH].batchName) > -1) {
      return selectedCount + 1 <= this.weekDayLimit;
    }
    return selectedCount + 1 <= this.defaultLimit;
  }

  _selectBatch(batch) {
    const selectedScenarios = batch.scenarioList;

    const unselectedScenarios = this.props[SCENARIO_LIST].reduce((acc, s) => {
      const isSelected = selectedScenarios.find(_s => _s.id === s.id);
      return isSelected ? acc : [...acc, s];
    }, []);

    this.setState({
      [SELECTED_BATCH]: batch,
      [SELECTED_TARGET_BATCH]: null,
      [UNSELECTED_SCENARIOS]: unselectedScenarios.sort(sortByScenarioName),
      [SELECTED_SCENARIOS]: selectedScenarios.sort(sortByScenarioName),
      [DELTA_COMMENT]: '',
      [DELTA_FIELDS]: { added: [], removed: [], combined: [] },
      [COMMENT_VALIDATED]: false,
      isSaved: false,
    });
  }

  _selectTargetBatch(batch) {
    this.setState({
      [SELECTED_TARGET_BATCH]: batch,
    });
  }

  _isBatchDirty() {
    if (!this.state[SELECTED_BATCH]) return false;

    const oldScenarioIdList = this.state[SELECTED_BATCH].scenarioList
      .map(s => s.id)
      .sort();
    const newScenarioIdList = this.state[SELECTED_SCENARIOS]
      .map(s => s.id)
      .sort();

    const isNew = !_.isEqual(oldScenarioIdList, newScenarioIdList);

    return isNew;
  }

  _calculateDelta() {
    if (!this.state[SELECTED_BATCH]) return false;

    const oldScenarioIdList = this.state[SELECTED_BATCH].scenarioList
      .map(s => ({
        id: s.id,
        scenarioName: s.scenarioName,
        fileVersion: s.fileVersion,
        scenarioNameAndVersion: s.scenarioNameAndVersion,
      }))
      .sort();

    const newScenarioIdList = this.state[SELECTED_SCENARIOS]
      .map(s => ({
        id: s.id,
        scenarioName: s.scenarioName,
        fileVersion: s.fileVersion,
        scenarioNameAndVersion: s.scenarioNameAndVersion,
      }))
      .sort();

    const scenariosOut = _.differenceWith(
      oldScenarioIdList,
      newScenarioIdList,
      _.isEqual
    );

    const scenariosIn = _.differenceWith(
      newScenarioIdList,
      oldScenarioIdList,
      _.isEqual
    );

    const combinedDelta = [...oldScenarioIdList, ...scenariosIn];

    this.setState({
      [DELTA_FIELDS]: {
        added: scenariosIn,
        removed: scenariosOut,
        combined: combinedDelta,
      },
    });

    return true;
  }

  _updateDeltaComment(proxy) {
    const value = proxy.currentTarget.value;
    this.setState({
      DELTA_COMMENT: value,
      COMMENT_VALIDATED: value.length > 19,
    });
  }

  _addScenario(scenario) {
    if (this._verifySelectLimit()) {
      this.setState(
        {
          [UNSELECTED_SCENARIOS]: this.state[UNSELECTED_SCENARIOS]
            .filter(s => s.id !== scenario.id)
            .sort(sortByScenarioName), // Remove from unselected list
          [SELECTED_SCENARIOS]: [
            ...this.state[SELECTED_SCENARIOS],
            scenario,
          ].sort(sortByScenarioName), // add to selected list
          isSaved: false,
          [DELTA_COMMENT]: '',
          [COMMENT_VALIDATED]: false,
        },
        () => this.calculateDelta()
      );
    }
  }

  _removeScenario(scenario) {
    this.setState(
      {
        [SELECTED_SCENARIOS]: this.state[SELECTED_SCENARIOS]
          .filter(s => s.id !== scenario.id)
          .sort(sortByScenarioName), // remove from selected list
        [UNSELECTED_SCENARIOS]: [
          ...this.state[UNSELECTED_SCENARIOS],
          scenario,
        ].sort(sortByScenarioName), // add to unselectedList
        isSaved: false,
      },
      () => this.calculateDelta()
    );
  }

  _buildBatch() {
    if (this.state[SELECTED_BATCH] === null) return undefined;

    const updatedBatch = new Batch(
      this.state[SELECTED_BATCH].id,
      this.state[SELECTED_BATCH].batchName,
      this.state[SELECTED_BATCH].version,
      this.state[SELECTED_BATCH].auditList,
      this.state[SELECTED_SCENARIOS],
      this.state[DELTA_COMMENT],
      this.state[DELTA_FIELDS].added,
      this.state[DELTA_FIELDS].removed
    );

    return updatedBatch;
  }

  _saveBatch() {
    const updatedBatch = this.buildBatch();

    if (updatedBatch === null) return;

    this.setState({
      [SELECTED_BATCH]: updatedBatch,
      busy: true,
      isSaving: true,
    });
    this.props[SAVE_BATCH](updatedBatch);
  }

  _viewDelta() {
    if (this.isBatchDirty()) {
      this.setState({ isDeltaModalActive: true });
    }
  }

  _closeModal() {
    this.setState({ isDeltaModalActive: false });
  }

  _deltaCount() {
    const addedCount = this.state[DELTA_FIELDS].added.length;
    const removedCount = this.state[DELTA_FIELDS].removed.length;

    return this.isBatchDirty() ? (
      <span onClick={() => this.viewDelta()}>
        <span className="batchContainer__deltaMessageBracket">{` ( `}</span>
        <span className="batchContainer__deltaMessage">{`${addedCount} added, ${removedCount} removed`}</span>
        <span className="batchContainer__deltaMessageBracket">{` ) `}</span>
      </span>
    ) : null;
  }

  render() {
    const { busy } = this.props;
    const { isDeltaModalActive } = this.state;

    const audit = this.state[SELECTED_BATCH]
      ? this.state[SELECTED_BATCH].auditList
      : null;

    const formatedAuditDate =
      audit && audit[audit.length - 1].timestamp
        ? ` on ${formatDate(audit[audit.length - 1].timestamp)}`
        : '';

    const limit =
      this.state[SELECTED_BATCH] &&
      this.weekDays.indexOf(this.state[SELECTED_BATCH].batchName) > -1
        ? this.weekDayLimit
        : this.defaultLimit;

    const selectedCountLimit = `Selection limit: ${this.state[
      SELECTED_SCENARIOS
    ].length} of ${limit}`;

    const exsitingComment =
      this.state[SELECTED_BATCH] && !this.isBatchDirty()
        ? this.state[SELECTED_BATCH].deltaComment
        : '';

    const deltaComment =
      this.state[DELTA_COMMENT] !== ''
        ? this.state[DELTA_COMMENT]
        : exsitingComment;

    const deltaCommentInValid =
      this.isBatchDirty() &&
      deltaComment !== undefined &&
      deltaComment.length < 20;

    const dirtyStatus = deltaCommentInValid ? 'error' : 'success';
    const deltaStatus = !this.isBatchDirty() ? null : dirtyStatus;

    return (
      <div className={classNames({ busy })}>
        {this.state[SELECTED_BATCH] ? (
          <span>
            <h3 key={1}>
              Active batch: {this.state[SELECTED_BATCH].batchName}{' '}
            </h3>
            <h5 key={3}>
              Last updated by:{' '}
              {audit[audit.length - 1].updatedBy + formatedAuditDate}{' '}
            </h5>
          </span>
        ) : (
          <h3 key={4}>Active batch: None Selected</h3>
        )}
        <div>
          <Grid
            style={{ marginLeft: '-15px' }}
            className={classNames('batchContainer', 'form-group1')}
          >
            <Row className="show-grid">
              <Col xs={6} md={2}>
                <ListComponent
                  dataList={this.props[BATCH_LIST]}
                  dataListType={VALUE}
                  header={'Batches'}
                  selectedItem={this.state[SELECTED_BATCH]}
                  id={'id'}
                  value={'batchName'}
                  onClick={this.selectBatch}
                />
              </Col>
              <Col xs={6} md={4}>
                <ListComponent
                  dataList={this.state[UNSELECTED_SCENARIOS]}
                  dataListType={VALUE}
                  header={'Available Scenarios'}
                  selectedItem={this.state[SELECTED_TARGET_BATCH]}
                  id={'id'}
                  value={'scenarioNameAndVersion'}
                  onClick={this.selectTargetBatch}
                  onDoubleClick={this.addScenario}
                />
              </Col>
              <Col xs={6} md={4}>
                <ListComponent
                  dataList={this.state[SELECTED_SCENARIOS]}
                  dataListType={VALUE}
                  header={'Selected Scenarios'}
                  selectedItem={this.state[SELECTED_TARGET_BATCH]}
                  subHeader={selectedCountLimit}
                  id={'id'}
                  value={'scenarioNameAndVersion'}
                  onClick={this.selectTargetBatch}
                  onDoubleClick={this.removeScenario}
                />
              </Col>
            </Row>
          </Grid>
        </div>
        <div>
          <hr />
          {this.props[CAN_EDIT] && (
            <div>
              <div>
                <FormGroup
                  validationState={deltaStatus}
                  style={{ margin: '0px' }}
                >
                  <ControlLabel>
                    Reason for change<font color="red"> *</font>
                    {this.deltaCount()}
                  </ControlLabel>
                  <FormControl
                    type="text"
                    id="batchComment"
                    value={deltaComment}
                    onChange={this.updateDeltaComment}
                    maxLength={255}
                    disabled={!this.isBatchDirty()}
                  />
                  <FormControl.Feedback />
                </FormGroup>
                {deltaCommentInValid ? (
                  <span style={{ color: 'red', fontSize: '8pt' }}>
                    {'Minimum 20 characters are required'}
                  </span>
                ) : null}
              </div>
              <p />
              <Button
                onClick={() => this.saveBatch()}
                disabled={
                  !this.isBatchDirty() || !this.state[COMMENT_VALIDATED]
                }
                bsStyle="primary"
              >
                <div className="batchContainer__save-btn-wrapper">
                  <span className="batchContainer__save-btn-text">
                    {this.state.isSaving && 'Saving'}
                    {this.state.isSaved && !this.state.isSaving && 'Saved'}
                    {!this.state.isSaved && !this.state.isSaving && 'Save'}
                  </span>
                  {this.state.isSaved &&
                  !this.state.isSaving && <i className="fa fa-check" />}
                </div>
              </Button>
            </div>
          )}
        </div>
        <DeltaDialog
          active={isDeltaModalActive}
          onClose={this.closeModal}
          delta={this.state[DELTA_FIELDS]}
        />
      </div>
    );
  }
}

BatchContainer.PropTypes = {
  [SCENARIO_LIST]: PropTypes.arrayOf(PropTypes.object).isRequired,
  [BATCH_LIST]: PropTypes.arrayOf(PropTypes.object).isRequired,
  [REQUEST_BATCHES]: PropTypes.func.isRequired,
  [SAVE_BATCH]: PropTypes.func.isRequired,
  [CAN_EDIT]: PropTypes.bool.isRequired,
  busy: PropTypes.string,
};

export default BatchContainer;
